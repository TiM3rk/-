#include <iostream>
#include <stdio.h>
#include <stdlib.h>

// Структура узла двусвязного списка
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Функция для создания нового узла
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Функция для вставки элемента в конец списка
void push_back(struct Node** head_ref, int data) {
    struct Node* newNode = createNode(data);
    if (*head_ref == NULL) {
        *head_ref = newNode;
        return;
    }
    struct Node* temp = *head_ref;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

// Функция для вставки элемента в начало списка
void push_forward(struct Node** head_ref, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head_ref;
    if (*head_ref != NULL) {
        (*head_ref)->prev = newNode;
    }
    *head_ref = newNode;
}

// Функция для вставки элемента на определенную позицию
void insert(struct Node** head_ref, int position, int data) {
    if (position < 1) {
        printf_s("Invalid position\n");
        return;
    }
    struct Node* newNode = createNode(data);
    if (position == 1) {
        push_forward(head_ref, data);
        return;
    }
    struct Node* temp = *head_ref;
    for (int i = 1; i < position - 1 && temp != NULL; i++) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf_s("Position out of range\n");
        return;
    }
    newNode->next = temp->next;
    newNode->prev = temp;
    if (temp->next != NULL) {
        temp->next->prev = newNode;
    }
    temp->next = newNode;
}

// Функция для удаления элемента по позиции
void deleted(struct Node** head_ref, int position) {
    if (*head_ref == NULL || position < 1) {
        printf_s("List is empty or invalid position\n");
        return;
    }
    struct Node* temp = *head_ref;
    if (position == 1) {
        *head_ref = temp->next;
        free(temp);
        return;
    }
    for (int i = 1; temp != NULL && i < position; i++) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf_s("Position out of range\n");
        return;
    }
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }
    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    }
    free(temp);
}

// Функция для возвращения индекса первого вхождения элемента
int index_by(struct Node* head, int data) {
    int index = 1;
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == data) {
            return index;
        }
        temp = temp->next;
        index++;
    }
    return -1; // Если элемент не найден
}

// Функция для сортировки списка
void order(struct Node** head_ref, char order_type) {
    struct Node* current, * index;
    int temp;
    if (*head_ref == NULL) {
        return;
    }
    for (current = *head_ref; current->next != NULL; current = current->next) {
        for (index = current->next; index != NULL; index = index->next) {
            if (order_type == '<') {
                if (current->data > index->data) {
                    temp = current->data;
                    current->data = index->data;
                    index->data = temp;
                }
            }
            else if (order_type == '>') {
                if (current->data < index->data) {
                    temp = current->data;
                    current->data = index->data;
                    index->data = temp;
                }
            }
        }
    }
}

// Функция для вывода первых n больших/меньших элементов
void first(struct Node* head, int n, char order_type) {
    order(&head, order_type);
    printf_s("First %d %c elements: ", n, order_type);
    struct Node* temp = head;
    for (int i = 0; i < n && temp != NULL; i++) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf_s("\n");
}
// Функция для вывода списка
void printList(struct Node* head) {
    printf_s("List: ");
    while (head != NULL) {
        printf_s("%d ", head->data);
        head = head->next;
    }
    printf_s("\n");
}

int main() {
    struct Node* head = NULL;

    push_back(&head, 1);
    push_back(&head, 3);
    push_back(&head, 2);
    push_back(&head, 5);

    printList(head);

    push_forward(&head, 10);
    push_forward(&head, 20);

    printList(head);

    insert(&head, 3, 100);

    printList(head);

    deleted(&head, 2);

    printList(head);

    printf("Index of 2: %d\n", index_by(head, 2));

    order(&head, '<');
    printList(head);

    first(head, 3, '>');

    return 0;
}
